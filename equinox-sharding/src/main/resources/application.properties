spring.application.name=equinox-sharding

server.port=2001

spring.cloud.nacos.discovery.server-addr=192.168.223.7:8848

#命名空间
spring.cloud.nacos.discovery.namespace=90cf6ee2-4fd0-4e02-9958-db8266636fc5

#服务分组
spring.cloud.nacos.discovery.group=discovery-group

#集群名称
spring.cloud.nacos.discovery.cluster-name=SH

#元数据
spring.cloud.nacos.discovery.metadata.version=v1


#DataSource命名空间
spring.shardingsphere.datasource.names=sharding-jdbc1-master,sharding-jdbc1-slave

#DataSource1
spring.shardingsphere.datasource.sharding-jdbc1-master.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.sharding-jdbc1-master.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.sharding-jdbc1-master.url=jdbc:mysql://localhost:3306/equinox_sharding?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
spring.shardingsphere.datasource.sharding-jdbc1-master.username=root
spring.shardingsphere.datasource.sharding-jdbc1-master.password=123456

#DataSource2
spring.shardingsphere.datasource.sharding-jdbc1-slave.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.sharding-jdbc1-slave.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.sharding-jdbc1-slave.url=jdbc:mysql://localhost:3306/equinox_sharding?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
spring.shardingsphere.datasource.sharding-jdbc1-slave.username=root
spring.shardingsphere.datasource.sharding-jdbc1-slave.password=123456

#主从库逻辑数据源定义ds_0----》sharding-jdbc1-master
spring.shardingsphere.sharding.master-slave-rules.ds_0.master-data-source-name=sharding-jdbc1-master
spring.shardingsphere.sharding.master-slave-rules.ds_0.slave-data-source-names=sharding-jdbc1-slave

#tb_item表分片,tb_item为逻辑表名
#actual-data-nodes=ds_$->{0..1}.user_$->{0..4} ---》分别入库ds_0,ds_1（数据节点代号） tb_item_0,tb_item_1...表名
spring.shardingsphere.sharding.tables.tb_item.actual-data-nodes=ds_0.tb_item_$->{0..9}

# 指定主键生成策略 主键id通过雪花算法生成
spring.shardingsphere.sharding.tables.tb_item.key-generator.column=id
spring.shardingsphere.sharding.tables.tb_item.key-generator.type=SNOWFLAKE

#数据库分片 sharding-column(分片字段) algorithm-expression（分片表达式，奇数，偶数分别入库）
#sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=item_id
#sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=ds_$->{id % 2}

# 指定分片策略 根据生成的id进行分表
spring.shardingsphere.sharding.tables.tb_item.table-strategy.inline.sharding-column=item_id
spring.shardingsphere.sharding.tables.tb_item.table-strategy.inline.algorithm-expression=tb_item_$->{item_id % 10}

#自动生成id
spring.shardingsphere.sharding.tables.tb_item.key-generator-column-name=id

# 开启SQL显示，默认值: false
spring.shardingsphere.props.sql.show=true

#如果t_order和t_order_item分表非常多，而且你的查询条件并不能够减少最终路由到的物理表，
# 那么结果就是这个笛尔卡积算出来的结果会非常的吓人，这也是官方提到的要注意的一个问题点，
# 而为了解决这个问题，sharding-jdbc提供了BindingTable的机制来优化这个问题。
#sharding.jdbc.config.sharding.binding-tables[0]=tb_order,t_order_item

mybatis.config-location=classpath:mybatis-config.xml


## 标准分片表配置
#spring.shardingsphere.rules.sharding.tables.<table-name>.actual-data-nodes= # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
#
## 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
#
## 用于单分片键的标准分片场景
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-column= # 分片列名称
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-algorithm-name= # 分片算法名称
#
## 用于多分片键的复合分片场景
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-columns= # 分片列名称，多个列以逗号分隔
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.sharding-algorithm-name= # 分片算法名称
#
## 用于 Hint 的分片策略
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.hint.sharding-algorithm-name= # 分片算法名称
#
## 分表策略，同分库策略
#spring.shardingsphere.rules.sharding.tables.<table-name>.table-strategy.xxx= # 省略
#
## 自动分片表配置
#spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.actual-data-sources= # 数据源名
#
#spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-column= # 分片列名称
#spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-algorithm-name= # 自动分片算法名称
#
## 分布式序列策略配置
#spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # 分布式序列列名称
#spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # 分布式序列算法名称
#
#spring.shardingsphere.rules.sharding.binding-tables[0]= # 绑定表规则列表
#spring.shardingsphere.rules.sharding.binding-tables[1]= # 绑定表规则列表
#spring.shardingsphere.rules.sharding.binding-tables[x]= # 绑定表规则列表
#
#spring.shardingsphere.rules.sharding.broadcast-tables[0]= # 广播表规则列表
#spring.shardingsphere.rules.sharding.broadcast-tables[1]= # 广播表规则列表
#spring.shardingsphere.rules.sharding.broadcast-tables[x]= # 广播表规则列表
#
#spring.shardingsphere.sharding.default-database-strategy.xxx= # 默认数据库分片策略
#spring.shardingsphere.sharding.default-table-strategy.xxx= # 默认表分片策略
#spring.shardingsphere.sharding.default-key-generate-strategy.xxx= # 默认分布式序列策略
#spring.shardingsphere.sharding.default-sharding-column= # 默认分片列名称
#
## 分片算法配置
#spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # 分片算法类型
#spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx= # 分片算法属性配置
#
## 分布式序列算法配置
#spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # 分布式序列算法类型
#spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # 分布式序列算法属性配置


